import { Injectable } from '@nestjs/common';
import { Command, Hears, Help, On, Start, Update } from 'nestjs-telegraf';
import { Context, Markup } from 'telegraf';
import { UsersService } from './user.service';
import { SceneContext } from 'telegraf/typings/scenes';
import { WorkShiftService } from './work-shift.service';
import { WorkShift } from '../entities/WorkShift.entity';
import { getDateMessage } from '../helpers/time';

@Update()
@Injectable()
export class AppService {
  constructor(
    private readonly usersService: UsersService,
    private readonly workShiftService: WorkShiftService,
  ) {}

  getData(): { message: string } {
    return { message: 'Welcome to server!' };
  }

  @Start()
  async startCommand(ctx: SceneContext) {
    const telegramUserId = ctx.message.chat.id;
    const isExistsUsers = await this.usersService.isExistsUser(telegramUserId);

    if (!isExistsUsers) {
      await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –¥–∞–≤–∞–π—Ç–µ –µ–≥–æ –¥–æ–±–∞–≤–∏–º');
      await ctx.scene.enter('CreateUser');
    } else {
      const isEndWorkTime = await this.workShiftService.isEndWorkShift(
        ctx.message.chat.id,
      );

      await ctx.reply(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FinanceBot',
        Markup.keyboard([
          [isEndWorkTime ? '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' : '–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É'],
          ['–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
          ['–°–º–µ–Ω–∏—Ç—å –§–ò–û', '–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É'],
        ]).resize(),
      );
    }
  }

  @Help()
  async helpCommand(ctx: Context) {
    await ctx.reply('Send me a sticker');
  }

  @On('sticker')
  async onSticker(ctx: Context) {
    await ctx.reply('üëç');
  }

  @Hears('hi')
  async hearsHi(ctx: Context) {
    await ctx.reply('Hey there');
  }

  @Hears('–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')
  @Command('work_start')
  async startWork(ctx: Context) {
    const userId = ctx.message.chat.id;
    const start_time = getDateMessage(ctx.message.date);

    const user = await this.usersService.findByTelegramId(userId);

    if (user) {
      const isEndWorkShift = await this.workShiftService.isEndWorkShift(userId);

      if (!isEndWorkShift) {
        ctx.reply(
          '–ó–∞–ø–∏—Å—å —Å–º–µ–Ω—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—á—É—é —Å–º–µ–Ω—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É"',
          Markup.keyboard([
            ['–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É'],
            ['–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
            ['–°–º–µ–Ω–∏—Ç—å –§–ò–û', '–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É'],
          ]).resize(),
        );
      } else {
        const work = await WorkShift.create({
          telegram_user_id: user.telegram_user_id,
          rate: user.rate,
          start_time: start_time,
        });

        await work.save();

        ctx.reply(
          '–ó–∞–ø–∏—Å—å —Å–º–µ–Ω—ã –Ω–∞—á–∞–ª–∞—Å—å',
          Markup.keyboard([
            ['–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É'],
            ['–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
            ['–°–º–µ–Ω–∏—Ç—å –§–ò–û', '–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É'],
          ]).resize(),
        );
      }
    }
  }

  @Hears('–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
  @Command('work_end')
  async endWork(ctx: Context) {
    const userId = ctx.message.chat.id;
    const end_time = getDateMessage(ctx.message.date);

    const user = await this.usersService.findByTelegramId(userId);

    if (user) {
      const isEndWorkShift = await this.workShiftService.isEndWorkShift(userId);

      if (!isEndWorkShift) {
        await this.workShiftService.setEndWorkTime(
          user.telegram_user_id,
          end_time,
        );

        ctx.reply(
          '–ó–∞–ø–∏—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã –≤–Ω–µ—Å–µ–Ω–∞',
          Markup.keyboard([
            ['–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É'],
            ['–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
            ['–°–º–µ–Ω–∏—Ç—å –§–ò–û', '–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É'],
          ]).resize(),
        );
      } else {
        ctx.reply(
          '–ó–∞–ø–∏—Å—å —Å–º–µ–Ω—ã —É–∂–µ –≤–Ω–µ—Å–µ–Ω–∞. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—á—É—é —Å–º–µ–Ω—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"',
          Markup.keyboard([
            ['–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É'],
            ['–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
            ['–°–º–µ–Ω–∏—Ç—å –§–ò–û', '–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É'],
          ]).resize(),
        );
      }
    }
  }

  @Hears('–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É')
  @Command('set_rate')
  async setRate(ctx: SceneContext) {
    await ctx.scene.enter('SetRate');
  }
}
